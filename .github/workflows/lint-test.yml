name: "Lint and Test"

on:
  push:
    branches:
      - '**'
    tags:
      - '!**'
  pull_request:
    branches:
      - '**'

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.7", "3.8", "3.9", "3.10" , "3.11" ]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip -q install -r requirements.txt
        pip -q install -r requirements-dev.txt
    - name: Compile all
      run: |
        python -m compileall odmpy tests
    - name: Analysing the code with black
      run: |
        black --check setup.py odmpy tests
    - name: Analysing the code with flake8
      run: |
        flake8 setup.py odmpy tests
    - name: Analysing the code with pylint
      run: |
        pylint setup.py odmpy tests
    - name: Analysing the code with mypy
      run: |
        mypy --package odmpy --package tests

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [ "3.7", "3.8", "3.9", "3.10" , "3.11" ]
    needs: lint
    steps:
    - uses: FedericoCarboni/setup-ffmpeg@v2
      id: setup-ffmpeg
    - uses: actions/checkout@v3
      with:
        submodules: true
        fetch-depth: 1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip -q install -r requirements.txt
        python3 -m pip -q install -r requirements-dev.txt
    - name: Run tests on ${{ matrix.os }} with python ${{ matrix.python-version }}
      run: |
        cd ${GITHUB_WORKSPACE}
        sh run_tests.sh
        mv .coverage ".coverage.${{ matrix.os }}.${{ matrix.python-version }}"
      shell: bash
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-results
        path: .coverage.*
        retention-days: 1
    - name: Test installation process
      run: |
        python3 setup.py install
        odmpy --version
      shell: bash

  coverage-report:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install coverage
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        if: github.ref == 'refs/heads/master'
        with:
          ref: "gh-pages"
          fetch-depth: 1
          path: "pages"
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: "master"
          fetch-depth: 1
          path: "source"
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-results
          path: source/
      - name: Merge and report
        run: |
          cd source/
          coverage combine && coverage json && python cov2md.py
          cat 'coverage.md' >> $GITHUB_STEP_SUMMARY
          coverage html -d "$GITHUB_WORKSPACE/coverage/"
      - name: Update coverage html report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 14

  coverage-upload:
    runs-on: ubuntu-latest
    needs: coverage-report
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: "gh-pages"
          fetch-depth: 1
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: coverage/
      - name: Publish coverage to pages
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          ls -ltr coverage/
          git add -A coverage/
          git status
          if [[ `git status --porcelain --untracked-files=no` ]]; then git commit -m "Updated coverage results from $GITHUB_SHA"; git push; fi
